#!/usr/bin/python3
"""
jouno: Journal notifications forwarder
======================================

A Systemd-Journal to Freedesktop-Notifications forwarder with burst-handling and filtering.

Usage:
======

        jouno [-h]
                     [--about] [--detailed-help]
                     [--install] [--uninstall]

Optional arguments:
-------------------

      -h, --help            show this help message and exit
      --detailed-help       full help in markdown format
      --about               about jouno
      --install             installs the jouno in the current user's path and desktop application menu.
      --uninstall           uninstalls the jouno application menu file and script for the current user.

Description
===========

This software is currently pre-release, It is feature complete and quite usable but may lack some polish.

``jouno,`` is system-tray application for monitoring the ``systemd-journal.`` It raises selected
entries as desktop-notifications.

The application monitors the ``systemd-journal`` for new entries, filters them, and forwards them as
standard ``freedesktop dbus notifications``.  Most linux desktops present these notifications
as individual popup messages.

Bursts of messages are handled by bundling them in to a single summarising notification.

``jouno`` is a tool designed to improve awareness of background activity by monitoring
the journal and raising interesting journal-entries as desktop notifications.  Possibilities for
it use include:

 * Monitoring specific jobs, such as the progress of the daily backups.
 * Watching for specific events, such as background core dumps.
 * Investigating desktop actions that raise journal log entries.
 * Discovering unnecessary daemon activity and unnecessary services.
 * Notifying access attempts, such as su, ssh, samba, or pam events.
 * Prevention of undesirable desktop activity, such as shutting down during the backups.
 * Detecting hardware events.
 * Raising general awareness of what is going on in the background.

I have previously released a gist [notify-desktop](https://gist.github.com/digitaltrails/26aad3282d8739db1de8bc2e59c812eb)
that allows root batch-jobs, such as my daily backups, to raise notifications for the current desktop
user, but ``notify-desktop`` only covers my own code.  ``jouno`` allows me to watch for and monitor any
jobs on the system and potentially removes the need for my jobs to use my ``notify-desktop`` script.

Configuration
=============

Clicking on the ``jouno`` system-tray icon brings up an ``options and filters`` panel which includes three
tabs:

  1. Options: settings that adjust how to display messages and how to collate of bursts af messages

  2. Match Filters: filters that restrict notifications to only journal entries they match.

  3. Ignore Filters: filters that restrict notifications by ignoring journal entries they match.

Match filtering is most useful when only minimal journal entries are of interest and the other entries aren't
of interest.  For example, a match-filter might be set for core-dump journal entries only.

Ignore filtering is most useful when almost any journal entries might be of interest and only a few journal
items need to be ignored.  For example, if any unexpected messages might be of interest, ignore-filters could
be set up for any that are routine.

It's common to require a few ignore-filters to discard any messages generated by the desktop notification system
in response to notices being posted.

Match and Ignore Patterns
-------------------------

 * Journal entries are filtered by list of rules.  Each rule defines a ``Rule ID`` and a ``pattern.``

 * Each rule is identified by a ``Rule ID`` which is text identifier compliant with commonly accepted
   variable naming conventions, for example:
   ```
   my_id
   my-id
   myId21
   ```

 * Rule ID's that end with a ``_regexp`` suffix define a regular-expression pattern, while those that
   do not end in ``_regexp`` define a literal-text pattern. For example:
   ```
   my-id_rexp
   ```
   versus
   ```
   my-id
   ```

 * Patterns may match any fragment of text seen in actual journal entries.

 * Patterns may also match specific journal entry fields, for example:
   ```
   'SYSLOG_IDENTIFIER=su'
   '_GID=500',
   '_HOSTNAME=kosmos1'
   'PRIORITY=7',
   '_CMDLINE=/usr/bin/kded5'
   '_PID=2143',
   ```
   When attempting to match specific fields surround the pattern with single-quotes
   to ensure that complete values are matched, for example: ``'_GID=500'``  will
   only match the intended field and value, it won't match ``PARENT_GID=5000``.

   The list of possible field names can be found at:

      [https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html)

Config files
------------

The config files are in INI-format divided into a number of sections as outlined below::

        # The options section controls notice timeouts, burst treatment
        [options]
        # Polling interval, how often to wait for journal entries between checking for config changes
        poll_seconds = 2
        # Wait at lease burst_seconds before declaring a burst of messages to have finished
        burst_seconds = 5
        # Only show the the first burst_truncate_messages of a burst
        burst_truncate_messages = 3
        # Set journo messages to timeout/auto-dismiss after notification-seconds
        notification_seconds = 30
        # For debugging the application
        debug = yes

        [match]
        # Each filter rule has an id and the message text to match
        my_rule_id = forward journal entry if this string matches
        # Each filter rule can be disabled by a corresponding my_rule_id_enabled = no option
        my_rule_id_enabled = no
        # A filter id that ends in _regexp is treated as a python regular-expression
        my_other_rule_id_regexp = forward journal [Ee]ntry if this python-regexp matches

        [ignore]
        my_ignore_rule_id = ignore journal entry if this string matches
        my_ignore_other_rule_id_regexp = ignore [Jj]ournal entry if this python-regexp matches

The config files are optional, but some filtering of the journal is likely to be necessary.
``jouno`` copes with cascades and won't cause infinite cascades, but filtering may be necessary
to eliminate excessive bursts caused by the desktop when it processes the notifications generated
by jouno.


Responsiveness
--------------

I've logged a bug against the KDE plasma notifications. Generating multiple messages with expiry timeouts
cause plasma-notifications and the kwin-x11 to cosume a large amount of CPU and become jerky when dragging
windows.  This doesn't seem to happen if notices do not expire (``notification_seconds = 0``).  This
isn't a bug confined to jouno generated notifications, it can be reproduced by normal shell commands,
for example:

  for i in 1 2 3 4 5 6 7 8 9 10; do notify-send --expire-time 30 test $i;done

The problem can be reduced by using sufficient match/ignore filters or by turning off notification
expiry by setting ``notification_seconds = 0``

Examples
========

    jouno
        All default controls.



Prerequisites
=============

All the following runtime dependencies are likely to be available pre-packaged on any modern Linux distribution
(``jouno`` was originally developed on OpenSUSE Tumbleweed).

* python 3.8: ``journo`` is written in python and may depend on some features present only in 3.8 onward.
* python 3.8 QtPy: the python GUI library used by ``jouno``.
* python 3.8 systemd: python module for native access to the systemd facilities.
* python 3.8 dbus: python module for dbus used for issuing notifications

Dependency installation on ``OpenSUSE``::

        zypper install python38-QtPy python38-systemd python38-dbus


jouno Copyright (C) 2021 Michael Hamilton
===========================================

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, version 3.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with this program. If not, see <https://www.gnu.org/licenses/>.

**Contact:**  m i c h a e l   @   a c t r i x   .   g e n   .   n z

----------

"""
import argparse
import configparser
import os
import pickle
import re
import select
import signal
import stat
import sys
import textwrap
import time
import traceback
from enum import Enum
from pathlib import Path
from typing import Mapping, Any, List, Type

import dbus
from systemd import journal

from PyQt5.QtCore import QCoreApplication, QProcess, Qt, QPoint, pyqtSignal, QThread, QModelIndex
from PyQt5.QtGui import QPixmap, QIcon, QImage, QPainter, QCursor, QStandardItemModel, QStandardItem, QIntValidator
from PyQt5.QtSvg import QSvgRenderer
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QMessageBox, QLineEdit, QLabel, \
    QPushButton, QSystemTrayIcon, QMenu, QStyle, QTextEdit, QDialog, QTabWidget, \
    QCheckBox, QGridLayout, QAction, QTableView, \
    QAbstractItemView, QHeaderView, QSplitter


DEFAULT_CONFIG = '''
[options]
poll_seconds = 2
burst_seconds = 5
burst_truncate_messages = 3
notification_seconds = 60
debug_enabled = yes

[ignore] 
kwin_bad_damage = XCB error: 152 (BadDamage)
kwin_bad_window = kwin_core: XCB error: 3 (BadWindow)
self_caused = NotificationPopup.
qt_kde_binding_loop = Binding loop detected for property

[match]

'''


# ######################## MONITOR SUB PROCESS CODE ###############################################################


class Priority(Enum):
    EMERGENCY = 0
    ALERT = 1
    CRITICAL = 2
    ERR = 3
    WARNING = 4
    NOTICE = 5
    INFO = 6
    DEBUG = 7


NOTIFICATION_ICONS = {
    Priority.EMERGENCY: 'dialog-error.png',
    Priority.ALERT: 'dialog-error.png',
    Priority.CRITICAL: 'dialog-error.png',
    Priority.ERR: 'dialog-error.png',
    Priority.WARNING: 'dialog-warning.png',
    Priority.NOTICE: 'dialog-information.png',
    Priority.INFO: 'dialog-information.png',
    Priority.DEBUG: 'dialog-information.png',
}

debug_enabled = True


def debug(*arg):
    if debug_enabled:
        print('DEBUG:', *arg)


def info(*arg):
    print('INFO:', *arg)


xml_escape_table = str.maketrans({
    "<": "&lt;",
    ">": "&gt;",
    "&": "&amp;",
    "'": "&apos;",
    '"': "&quot;",
})


def xmlesc(txt: str):
    return txt.translate(xml_escape_table)


class NotifyFreeDesktop:

    def __init__(self):
        self.notify_interface = dbus.Interface(
            object=dbus.SessionBus().get_object("org.freedesktop.Notifications", "/org/freedesktop/Notifications"),
            dbus_interface="org.freedesktop.Notifications")

    def notify_desktop(self, app_name: str, summary: str, message: str, priority: Priority, timeout: int):
        # https://specifications.freedesktop.org/notification-spec/notification-spec-latest.html
        replace_id = 0
        notification_icon = NOTIFICATION_ICONS[priority]
        action_requests = []
        # extra_hints = {"urgency": 1, "sound-name": "dialog-warning", }
        extra_hints = {}
        self.notify_interface.Notify(app_name, replace_id, notification_icon, summary, message, action_requests,
                                     extra_hints,
                                     timeout)


def get_config_path() -> Path:
    config_dir_path = Path.home().joinpath('.config').joinpath('jouno')
    if not config_dir_path.parent.is_dir():
        os.makedirs(config_dir_path)
    path = config_dir_path.joinpath('jouno.conf')
    return path


class Config(configparser.ConfigParser):

    def __init__(self):
        super().__init__()
        self.path = get_config_path()
        self.modified_time = 0.0
        self.read_string(DEFAULT_CONFIG)

    def save(self):
        with open(self.path, 'w') as config_file:
            self.write(config_file)

    def refresh(self) -> bool:
        if self.path.is_file():
            modified_time = self.path.lstat().st_mtime
            if self.modified_time == modified_time:
                return False
            self.modified_time = modified_time
            info(f"Reading {self.path}")
            config_text = self.path.read_text()
            for section in ['options', 'match', 'ignore']:
                self.remove_section(section)
            self.read_string(config_text)
            for section in ['options', 'match', 'ignore']:
                if section not in self:
                    self[section] = {}
            return True
        if self.modified_time > 0.0:
            info(f"Config file has been deleted: {self.path}")
            self.modified_time = 0.0
        return False


class JournalWatcher:

    def __init__(self, supervisor=None):
        self.config: Config = None
        self.burst_truncate: int = 3
        self.polling_millis: int = 2_000
        self.notification_timeout_millis: int = 60_000
        self.burst_max_millis = 10_000
        self.ignore_regexp: Mapping[str, re] = {}
        self.match_regexp: Mapping[str, re] = {}
        self.update_config()
        self._stop = False
        self.supervisor = supervisor

    def update_config(self):
        if self.config is None:
            self.config = Config()
        if not self.config.refresh():
            return
        if 'poll_seconds' in self.config['options']:
            self.polling_millis = 1_000 * self.config.getint('options', 'poll_seconds')
        if 'burst_truncate_messages' in self.config['options']:
            self.burst_truncate = self.config.getint('options', 'burst_truncate_messages')
        if 'burst_seconds' in self.config['options']:
            self.burst_max_millis = 1_000 * self.config.getint('options', 'burst_seconds')
        if 'notification_seconds' in self.config['options']:
            self.notification_timeout_millis = 1_000 * self.config.getint('options', 'notification_seconds')
        if 'debug' in self.config['options']:
            global debug_enabled
            debug_enabled = self.config.getboolean('options', 'debug')
        self.ignore_regexp: Mapping[str, re] = {}
        self.match_regexp: Mapping[str, re] = {}
        self.compile_patterns(self.config['match'], self.match_regexp)
        self.compile_patterns(self.config['ignore'], self.ignore_regexp)

    def compile_patterns(self, rules_map: Mapping[str, str], patterns_map: Mapping[str, re.Pattern]):
        for rule_id, rule_text in rules_map.items():
            if rule_id.endswith('_enabled'):
                pass
            else:
                rule_enabled_key = rule_id + "_enabled"
                if rule_enabled_key not in rules_map or rules_map[rule_enabled_key].lower() == 'yes':
                    debug(f"including {rule_id}")
                    if rule_id.endswith('_regexp'):
                        patterns_map[rule_id] = re.compile(rule_text)
                    else:
                        patterns_map[rule_id] = re.compile(re.escape(rule_text))

    def determine_app_name(self, journal_entries: List[Mapping[str, Any]]):
        app_name_info = ''
        sep = '\u25b3'
        for journal_entry in journal_entries:
            for key, prefix in {'_CMDLINE': '', '_EXE': '', '_COMM': '', 'SYSLOG_IDENTIFIER': '',
                                '_KERNEL_SUBSYSTEM': 'kernel ',
                                }.items():
                print(key, journal_entry[key] if key in journal_entry else False)
                if key in journal_entry:
                    value = str(journal_entry[key])
                    if app_name_info.find(value) < 0:
                        app_name_info += sep + prefix + value
                        sep = '; '
        if app_name_info == '':
            app_name_info = sep + 'unknown'
        return app_name_info

    def determine_summary(self, journal_entries: List[Mapping[str, Any]]):
        journal_entry = journal_entries[0]
        realtime = journal_entry['__REALTIME_TIMESTAMP']
        transport = f" {journal_entry['_TRANSPORT']}" if '_TRANSPORT' in journal_entry else ''
        number_of_entries = len(journal_entries)
        if number_of_entries > 1:
            summary = f"\u25F4{realtime:%H:%M:%S}:{transport} Burst of {number_of_entries} messages"
        else:
            text = ''
            sep = ''
            for key, prefix in {'SYSLOG_IDENTIFIER': '', '_PID': 'PID ', '_KERNEL_SUBSYSTEM': 'kernel ', }.items():
                if key in journal_entry:
                    value = str(journal_entry[key])
                    if text.find(value) < 0:
                        text += sep + prefix + value
                        sep = ' '
            summary = f"\u25F4{realtime:%H:%M:%S}: {text} (\u21e8{transport})"
        debug(f"realtime='{realtime}' summary='{summary}'")
        return summary

    def determine_message(self, journal_entries: List[Mapping[str, Any]]) -> str:
        message = ''
        sep = ''
        previous_message = ''
        duplicates = 0
        reported = 0
        for journal_entry in journal_entries:
            new_message = journal_entry['MESSAGE']
            if new_message == previous_message:
                duplicates += 1
            else:
                message += f"{sep}\u25B7{new_message}"
                previous_message = new_message
                reported += 1
                if reported == self.burst_truncate and reported < len(journal_entries):
                    message += f"\n[Only showing first {self.burst_truncate} messages]"
                    break
            sep = '\n'
        if duplicates > 0:
            message += f'\n[{duplicates + 1} duplicate messages]'
        debug(f'message={message}')
        return message

    def determine_priority(self, journal_entries: List[Mapping[str, Any]]) -> Priority:
        current_level = Priority.NOTICE
        for journal_entry in journal_entries:
            if 'PRIORITY' in journal_entry:
                priority = journal_entry['PRIORITY']
                if priority < current_level.value and (Priority.EMERGENCY.value <= priority <= Priority.DEBUG.value):
                    current_level = Priority(priority)
        return current_level

    def is_notable(self, journal_entry: Mapping[str, Any]):
        # Is a list comprehension slower than a for-loop for string construction?
        # Use an easy a format that is easy to pattern match
        fields_str = ', '.join((f"'{key}={str(value)}'" for key, value in journal_entry.items()))
        debug(fields_str)
        for rule_id, match_re in self.match_regexp.items():
            if match_re.search(fields_str) is not None:
                debug(f"rule=match.{rule_id}: {journal_entry['MESSAGE']}")
                return True
        for rule_id, ignore_re in self.ignore_regexp.items():
            if ignore_re.search(fields_str) is not None:
                debug(f"rule=ignore.{rule_id}: {journal_entry['MESSAGE']}")
                return False
        # otherwise no patterns matched:
        # 1) if there are any 'match' patterns at all, we need to return False.
        # 2) if there are no 'match' patterns at all, we need to return True.
        return len(self.match_regexp) == 0

    def is_stop_requested(self) -> bool:
        return self.supervisor.isInterruptionRequested()

    def watch_journal(self, entry_callback=None):
        self._stop = False
        notify = NotifyFreeDesktop()

        journal_reader = journal.Reader()
        journal_reader.seek_tail()
        journal_reader.get_previous()

        journal_reader_poll = select.poll()
        journal_reader_poll.register(journal_reader, journal_reader.get_events())
        journal_reader.add_match()
        while True:
            if self.is_stop_requested():
                return
            self.update_config()
            burst_count = 0
            notable = []
            limit_time_ns = self.burst_max_millis * 1_000_000 + time.time_ns()
            while journal_reader_poll.poll(self.polling_millis) and time.time_ns() < limit_time_ns:
                if self.is_stop_requested():
                    return
                if journal_reader.process() == journal.APPEND:
                    for journal_entry in journal_reader:
                        if self.is_stop_requested():
                            return
                        burst_count += 1
                        if self.is_notable(journal_entry):
                            debug(f"Notable: burst_count={len(notable)}: {journal_entry['MESSAGE']}")
                            notable.append(journal_entry)
                            self.supervisor.new_journal_entry(journal_entry)
            if len(notable):
                notify.notify_desktop(app_name=self.determine_app_name(notable),
                                      summary=self.determine_summary(notable),
                                      message=self.determine_message(notable),
                                      priority=self.determine_priority(notable),
                                      timeout=self.notification_timeout_millis)


def translate(source_text: str):
    """For future internationalization - recommended way to do this at this time."""
    return QCoreApplication.translate('jouno', source_text)


# ######################## USER INTERFACE CODE ######################################################################

JOUNO_VERSION = '0.9.0'

TABLE_HEADER_STYLE = "font-weight: bold;font-size: 9pt;"

ABOUT_TEXT = f"""

<b>jouno version {JOUNO_VERSION}</b>
<p>
A journal-entry to desktop-notification forwarder. 
<p>
<i>Right-mouse &rarr; context-menu &rarr; help</i> for help.
<p>
Visit <a href="https://github.com/digitaltrails/jouno">https://github.com/digitaltrails/jouno</a> for 
more details.
<p><p>

<b>jouno Copyright (C) 2021 Michael Hamilton</b>
<p>
This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, version 3.
<p>
This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.
<p>
You should have received a copy of the GNU General Public License along
with this program. If not, see <a href="https://www.gnu.org/licenses/">https://www.gnu.org/licenses/</a>.

"""

# https://www.svgrepo.com/svg/335387/filter
FILTER_SVG_OLD = b"""
<svg width="24px" height="24px" viewBox="0 -1 18 19" xmlns="http://www.w3.org/2000/svg">
  <path fill="#494c4e" d="M14.35 4.855L10 9.21v2.8c0 1.31-2 2.45-2 1.89V9.2L3.65 4.856a.476.476 0 0 1-.11-.54A.5.5 0 0 1 4 4h10a.5.5 0 0 1 .46.31.476.476 0 0 1-.11.545z"/>
  <circle fill="#494c4e" cx="9" cy="17" r="1"/>
  <circle fill="#494c4e" cx="5" cy="1" r="1"/>
  <circle fill="#494c4e" cx="13" cy="1" r="1"/>
  <circle fill="#494c4e" cx="9" cy="1" r="1"/>
</svg>
"""

JOUNO_ICON_SVG = b"""
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
 <path fill="#232629" style="fill:currentColor;fill-opacity:1;stroke:none" 
      d="M 4 2 L 4 3 L 13 3 L 13 13 L 4 13 L 4 14 L 13 14 L 14 14 L 14 3 L 14 2 L 7 2 z"
      class="ColorScheme-Text"
     />
 <path fill="#3491e1" style="fill-opacity:1;stroke:none" 
      d="M 8 6 L 8 8 L 12 8 L 12 7 L 8 7 z M 8 8 L 8 10 L 12 10 L 12 9 L 8 9 z M 8 11 L 8 12 L 12 12 L 12 11 L 10 11 z "
      
     />

</svg>
"""
# d="M 4 2 L 4 3 L 13 3 L 13 13 L 4 13 L 4 14 L 13 14 L 14 14 L 14 3 L 14 2 L 7 2 z M 7 6 L 7 8 L 12 8 L 12 7 L 7 7 z M 8 8 L 8 10 L 12 10 L 12 9 L 8 9 z M 9 11 L 9 12 L 12 12 L 12 11 L 10 11 z "
# d = "M 4 2 L 4 3 L 13 3 L 13 13 L 4 13 L 4 14 L 13 14 L 14 14 L 14 3 L 14 2 L 7 2 z M 7 6 L 7 7 L 12 7 L 12 6 L 7 6 z M 8 8 L 8 9 L 12 9 L 12 8 L 8 8 z M 9 10 L 9 11 L 12 11 L 12 10 L 10 10 z "

JOUNO_WINDOW_ICON_SVG = JOUNO_ICON_SVG.replace(b'#232629', b'#bbbbbb')

JOUNO_PAUSED_ICON_SVG = b"""
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
  <defs id="defs3051">
    <style type="text/css" id="current-color-scheme">
      .ColorScheme-Text {
        color:#232629;
      }
      .ColorScheme-NegativeText {
        color:#da4453;
      }
      </style>
  </defs>
  <path
     style="fill:currentColor;fill-opacity:1;stroke:none" 
     class="ColorScheme-NegativeText"
    d="M 8 2 A 6 5.9999852 0 0 0 4.5273438 3.1132812 L 5.2460938 3.8320312 A 5 5 0 0 1 8 3 A 5 5 0 0 1 13 8 A 5 5 0 0 1 12.167969 10.753906 L 12.884766 11.470703 A 6 5.9999852 0 0 0 14 8 A 6 5.9999852 0 0 0 8 2 z M 3.1152344 4.5292969 A 6 5.9999852 0 0 0 2 8 A 6 5.9999852 0 0 0 8 14 A 6 5.9999852 0 0 0 11.472656 12.886719 L 10.753906 12.167969 A 5 5 0 0 1 8 13 A 5 5 0 0 1 3 8 A 5 5 0 0 1 3.8320312 5.2460938 L 3.1152344 4.5292969 z M 5 7 L 5 9 L 11 9 L 11 7 L 5 7 z "
          />
</svg>
"""


def create_image_from_svg_string(svg_str: bytes) -> QImage:
    """There is no QIcon option for loading QImage from a string, only from a SVG file, so roll our own."""
    renderer = QSvgRenderer(svg_str)
    image = QImage(64, 64, QImage.Format_ARGB32)
    image.fill(0x0)
    painter = QPainter(image)
    renderer.render(painter)
    painter.end()
    return image


def create_icon_from_svg_string(svg_str: bytes) -> QIcon:
    """There is no QIcon option for loading SVG from a string, only from a SVG file, so roll our own."""
    image = create_image_from_svg_string(svg_str)
    return QIcon(QPixmap.fromImage(image))


class OptionsTab(QWidget):

    def __init__(self, config_section: Mapping[str, str]):
        super().__init__()
        default_config = configparser.ConfigParser()
        default_config.read_string(DEFAULT_CONFIG)
        self.option_map: Mapping[str, QWidget] = {}
        layout = QGridLayout(self)
        row_number = 0
        for option_id, value in default_config['options'].items():
            label_widget = QLabel(translate(option_id))
            if option_id.endswith("_enabled"):
                input_widget = QCheckBox()
                input_widget.setChecked(value == 'yes')
            else:
                input_widget = QLineEdit()
                input_widget.setValidator(QIntValidator(0, 60))
                input_widget.setMaximumWidth(100)
                input_widget.setText(value)
            layout.addWidget(label_widget, row_number, 0)
            layout.addWidget(input_widget, row_number, 1, 1, 2, alignment=Qt.AlignLeft)
            self.option_map[option_id] = input_widget
            row_number += 1
        # Add a spacer to force those above to scrunch up.
        layout.addWidget(QWidget(), row_number, 1, 2, 2, alignment=Qt.AlignLeft)
        self.setLayout(layout)

    def copy_from_config(self, config_section: Mapping[str, str]):
        for option_id, widget in self.option_map.items():
            if option_id in config_section:
                if option_id.endswith("_enabled"):
                    widget.setChecked(config_section[option_id].lower() == "yes")
                else:
                    widget.setText(config_section[option_id])

    def copy_to_config(self, config_section: Mapping[str, str]):
        for option_id, widget in self.option_map.items():
            if option_id.endswith("_enabled"):
                config_section[option_id] = "yes" if widget.isChecked() else "no"
            else:
                if widget.text().strip() != "":
                    config_section[option_id] = widget.text()


class FilterPanel(QWidget):

    def __init__(self, config_section: Mapping[str, str], tooltip=''):
        super().__init__()
        print("table", str(config_section.keys()))

        self.table_view = FilterTableView(config_section, tooltip)

        # TODO add a test rules button that pops up a testing dialog with an input field.
        layout = QVBoxLayout(self)
        layout.addWidget(self.table_view)
        self.setLayout(layout)

    def is_valid(self):
        return self.table_view.is_valid()

    def copy_from_config(self, config_section: Mapping[str, str]):
        self.table_view.copy_from_config(config_section)

    def copy_to_config(self, config_section: Mapping[str, str]):
        self.table_view.copy_to_config(config_section)

    def clear_selection(self):
        self.table_view.clearSelection()

    def add_rule(self):
        self.table_view.add_new_rule()

    def delete_rules(self):
        self.table_view.delete_selected_rules()


class FilterTableModel(QStandardItemModel):

    def __init__(self, number_of_rows: int):
        super().__init__(number_of_rows, 2)
        # use spaces to force a wider column - seems to be no other EASY way to do this.
        self.setHorizontalHeaderLabels(
            [translate("Enable/Disable Rule-ID"), translate("Pattern")])


class FilterValidationException(Exception):
    pass


class FilterTableView(QTableView):

    def __init__(self, config_section: Mapping[str, str], tooltip=""):
        super().__init__()
        self.enable_tooltip = \
            translate("Enable: rules can be selective enabled/disabled.")
        self.rule_id_tooltip_1 = \
            translate("Rule ID: a letter followed by letters, digits, underscores and hyphens")
        self.rule_id_tooltip_2 = \
            translate("A rule ID with a _regexp suffix denotes its pattern to be a regular expression.")
        self.pattern_tooltip = \
            translate("Pattern: Text or regexp to partially match in the journal entry's message field.")
        tooltip += "\n\n" + translate("Columns:") + "\n" + \
                   translate(f"    {self.enable_tooltip}\n") + \
                   translate(f"    {self.rule_id_tooltip_1}\n") + \
                   translate(f"          {self.rule_id_tooltip_2}\n") + \
                   translate(f"    {self.pattern_tooltip}\n")
        self.setToolTip(tooltip)
        self.setModel(FilterTableModel(len(config_section)))
        self.copy_from_config(config_section)
        self.setEditTriggers(QAbstractItemView.AllEditTriggers)
        self.verticalHeader().setSectionsMovable(True)
        self.verticalHeader().setDragEnabled(True)
        self.verticalHeader().setDragDropMode(QAbstractItemView.InternalMove)
        self.setDragDropOverwriteMode(True)
        self.resizeColumnsToContents()
        self.setSelectionMode(QAbstractItemView.MultiSelection)
        self.setSelectionBehavior(QAbstractItemView.SelectRows)
        # self.setItemDelegateForColumn(1, ColumnItemDelegate())
        self.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)
        self.horizontalHeader().setDefaultAlignment(Qt.AlignLeft)
        self.horizontalHeader().setStyleSheet(TABLE_HEADER_STYLE)
        self.setShowGrid(False)

    def item_view_order(self) -> List[int]:
        """
        Walk the table model's rows in model-order of 1..n, find the current y-location or each row,
        sort the y-locations to determine the current view ordering of the model's rows (which may
        no longer be 1..n due to drag and drop).  Return a list of the current view ordering, for
        example [4, 0, 1, 2, 3].
        """
        # If there is no access to the rowCount, rowViewportPosition() can be called
        # until it returns -1 (note it can return other valid negative values, so just test
        # for -1.
        row_y_positions = []
        debug(f"row count={self.model().rowCount()}")
        for row_num in range(self.model().rowCount()):
            y = self.rowViewportPosition(row_num)
            row_y_positions.append((y, row_num))
        row_y_positions.sort()
        return [row_num for _, row_num in row_y_positions]

    def create_rule_item(self, rule_id: str):
        enable_item = QStandardItem(rule_id)
        enable_item.setCheckable(True)
        enable_item.setCheckState(Qt.Checked)
        enable_item.setEditable(True)
        enable_item.setToolTip(translate(self.rule_id_tooltip_1 + "\n" + self.rule_id_tooltip_2))
        return enable_item

    def is_valid(self) -> bool:
        model = self.model()
        for row_num in self.item_view_order():
            key = model.item(row_num, 0).text()
            value = model.item(row_num, 1).text()
            if re.fullmatch("[a-zA-Z]([a-zA-Z0-9_-])*", key) is None:
                raise FilterValidationException(
                    self.__class__.__name__, "Invalid rule ID", f"ID='{key}'")
            if key.endswith("_enabled"):
                pass
            elif key.endswith("_regexp"):
                try:
                    re.compile(value)
                except Exception as e:
                    raise FilterValidationException(
                        self.__class__.__name__, "Invalid Regular Expression", f"\n{key}={value}\n\n{str(e)}")
        return True

    def copy_from_config(self, config_section: Mapping[str, str]):
        model = self.model()
        if model.rowCount() > 0:
            model.removeRows(0, model.rowCount())
        row = 0
        enable_item_map: Mapping[str, QStandardItem] = {}
        # Step one - first gather the patterns and create a row for each one
        for key, value in config_section.items():
            if key.endswith("_enabled"):
                pass
            else:
                key_item = self.create_rule_item(key)
                key_enabled = key + "_enabled"
                if key_enabled in config_section:
                    if config_section[key_enabled].strip().lower() != 'yes':
                        key_item.setCheckState(Qt.Unchecked)
                model.setItem(row, 0, key_item)
                value_item = QStandardItem(value)
                value_item.setToolTip(self.pattern_tooltip)
                model.setItem(row, 1, QStandardItem(value_item))
                row += 1

    def copy_to_config(self, config_section: Mapping[str, str]):
        debug(f'table order = {self.item_view_order()} ')
        for key in config_section.keys():
            del config_section[key]
        model = self.model()
        for row_num in self.item_view_order():
            key = model.item(row_num, 0).text()
            if key.strip() == '':
                continue
            value = model.item(row_num, 1).text()
            config_section[key] = value
            if model.item(row_num, 0).checkState() == Qt.Unchecked:
                config_section[key + "_enabled"] = "no"

    def add_new_rule(self):
        model = self.model()
        selected_row_indices = self.selectionModel().selectedRows()
        if len(selected_row_indices) > 0:
            index = sorted(selected_row_indices)[0]
            model.insertRow(index.row(), [self.create_rule_item(''), QStandardItem('')])
            self.scrollTo(index)
            self.clearSelection()
            self.selectRow(index.row())
        else:
            model.appendRow([self.create_rule_item(''), QStandardItem('')])
            self.scrollToBottom()

    def delete_selected_rules(self):
        model = self.model()
        selected_row_indices = self.selectionModel().selectedRows()
        if len(selected_row_indices) == 0:
            message = QMessageBox(self)
            message.setWindowTitle(translate('Delete'))
            message.setText(
                translate("Cannot delete, no rows selected.\nClick in the left margin to select some rows."))
            message.setIcon(QMessageBox.Critical)
            message.setStandardButtons(QMessageBox.Ok)
            message.exec()
            return
        # Reverse the order so we delete from bottom up preserving the positions of yet to be removed rows.
        for index in sorted(selected_row_indices, reverse=True):
            model.removeRow(index.row())


class JournalWatcherTask(QThread):
    signal_new_entry = pyqtSignal(dict)

    def __init__(self) -> None:
        super().__init__()
        self.watcher = JournalWatcher(self)

    def run(self) -> None:
        self.watcher.watch_journal()

    def new_journal_entry(self, journal_entry: Mapping):
        self.signal_new_entry.emit(journal_entry)


def title(widget: QLabel) -> QLabel:
    widget.setStyleSheet("font-weight: normal;font-size: 13pt;")
    return widget


class ConfigPanel(QWidget):

    def __init__(self):
        super().__init__()

        layout = QVBoxLayout()
        self.setLayout(layout)
        tabs = QTabWidget()

        config = Config()
        config.refresh()

        options_panel = OptionsTab(config['options'])

        match_panel = FilterPanel(
            config['match'],
            tooltip=translate("Only issue notifications for journal-entry messages that match one of these rules.")
        )

        ignore_panel = FilterPanel(
            config['ignore'],
            tooltip=translate("Ignore journal-entry messages that match any of these rules."))

        button_box = QWidget()
        button_box_layout = QGridLayout()
        button_box.setLayout(button_box_layout)
        apply_button = QPushButton(translate("Apply"))
        revert_button = QPushButton(translate("Revert"))

        def add_action():
            tabs.currentWidget().add_rule()

        def del_action():
            tabs.currentWidget().delete_rules()

        add_button = QPushButton(translate("Add rules"))
        add_button.setToolTip("Add a new row above the selected row or at the end if no row is selected.\n"
                              "Click in the left margin to select a row.")
        add_button.clicked.connect(add_action)
        del_button = QPushButton(translate("Delete rules"))
        del_button.setToolTip("Remove selected rows. Click in the left margin to select some rows.")
        del_button.clicked.connect(del_action)

        button_box_layout.addWidget(apply_button, 0, 0)
        button_box_layout.addWidget(revert_button, 0, 1)
        button_box_layout.setColumnMinimumWidth(3, 200)
        button_box_layout.addWidget(add_button, 0, 4)
        button_box_layout.addWidget(del_button, 0, 5)

        def save_action():
            debug("Apply")
            try:
                if match_panel.is_valid() and ignore_panel.is_valid():
                    options_panel.copy_to_config(config['options'])
                    match_panel.copy_to_config(config['match'])
                    ignore_panel.copy_to_config(config['ignore'])
                    config.save()
                    match_panel.clear_selection()
                    ignore_panel.clear_selection()
                    message = QMessageBox(self)
                    message.setWindowTitle(translate('Applied'))
                    message.setText(translate('Changes are now active.'))
                    message.setIcon(QMessageBox.Information)
                    message.setStandardButtons(QMessageBox.Ok)
                    # message.setDetailedText()
                    message.exec()
                    debug(f'ok')
            except FilterValidationException as e:
                title, summary, text = e.args
                message = QMessageBox(self)
                message.setWindowTitle(title)
                message.setText(f"{translate('Cannot apply changes.')}\n{summary}\n{text}")
                message.setIcon(QMessageBox.Critical)
                message.setStandardButtons(QMessageBox.Ok)
                # message.setDetailedText()
                message.exec()

        apply_button.clicked.connect(save_action)

        def revert_action():
            debug("revert")
            before = pickle.dumps(config)
            tmp = pickle.loads(before)
            options_panel.copy_to_config(tmp['options'])
            match_panel.copy_to_config(tmp['match'])
            ignore_panel.copy_to_config(tmp['ignore'])
            after = pickle.dumps(tmp)
            if before == after:
                revert_message = QMessageBox(self)
                revert_message.setText(translate('There are no unapplied changes, there is nothing to revert.'))
                revert_message.setIcon(QMessageBox.Warning)
                revert_message.setStandardButtons(QMessageBox.Ok)
                revert_message.exec()
                return
            else:
                revert_message = QMessageBox(self)
                revert_message.setText(translate('There are unapplied changes, revert and loose all changes?'))
                revert_message.setIcon(QMessageBox.Question)
                revert_message.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
                if revert_message.exec() == QMessageBox.Cancel:
                    return
            info("reverting unsaved edits")
            options_panel.copy_from_config(config['options'])
            match_panel.copy_from_config(config['match'])
            ignore_panel.copy_from_config(config['ignore'])
            match_panel.clear_selection()
            ignore_panel.clear_selection()

        revert_button.clicked.connect(revert_action)

        tabs.addTab(ignore_panel, translate("Ignore Filters"))
        tabs.addTab(match_panel, translate("Match Filters"))
        tabs.addTab(options_panel, translate("Options"))
        tabs.setCurrentIndex(0)

        layout.addWidget(title(QLabel("Configuration")))
        layout.addWidget(tabs)
        layout.addWidget(button_box)

        def tab_change(tab_number):
            add_button.setEnabled(tab_number != 2)
            del_button.setEnabled(tab_number != 2)

        tabs.currentChanged.connect(tab_change)

        options_panel.copy_from_config(config['options'])
        match_panel.copy_from_config(config['match'])
        ignore_panel.copy_from_config(config['ignore'])
        # self.make_visible()

    def make_visible(self):
        """
        If the dialog exists(), call this to make it visible by raising it.
        Internal, used by the class method show_existing_dialog()
        """
        self.show()
        self.raise_()
        self.activateWindow()


class MainWindow(QWidget):

    def __init__(self, journal_watcher_task: JournalWatcherTask):
        super().__init__()
        self.setContextMenuPolicy(Qt.CustomContextMenu)
        self.setWindowTitle(translate('Control Panel'))
        self.setMinimumWidth(1200)
        self.setMinimumHeight(1000)
        splitter = QSplitter()
        splitter.setOrientation(Qt.Vertical)
        layout = QVBoxLayout()
        splitter.setStyleSheet("QSplitter::handle{background: #333333;}")
        splitter.addWidget(JournalPanel(journal_watcher_task))
        splitter.addWidget(ConfigPanel())
        layout.addWidget(splitter)
        self.setLayout(layout)


class JournalPanel(QWidget):

    def __init__(self, journal_watcher_task: JournalWatcherTask):
        super().__init__()

        self.table_view = JournalTableView(journal_watcher_task)

        # TODO add a test rules button that pops up a testing dialog with an input field.
        layout = QVBoxLayout(self)
        layout.addWidget(title(QLabel(translate("Recently notified"))))
        layout.addWidget(self.table_view)

        self.setLayout(layout)


class JournalTableView(QTableView):

    def __init__(self, journal_watcher_task: JournalWatcherTask):
        super().__init__()
        self.setToolTip(translate("Double click to view the complete journal entry.") + "\n" +
                        translate("Control-C to copy a selected field's text."))
        self.setModel(JournalTableModel(number_of_rows=0))
        self.setDragDropOverwriteMode(False)
        self.resizeColumnsToContents()
        self.setSelectionMode(QAbstractItemView.SingleSelection)
        self.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.setColumnWidth(0, 8 * 14)
        self.setColumnWidth(1, 10 * 14)
        self.setColumnWidth(2, 10 * 14)
        self.setColumnWidth(3, 5 * 14)
        self.horizontalHeader().setSectionResizeMode(4, QHeaderView.Stretch)
        self.horizontalHeader().setDefaultAlignment(Qt.AlignLeft)
        self.horizontalHeader().setStyleSheet(TABLE_HEADER_STYLE)
        # self.setGridStyle(Qt.NoPen)
        self.setShowGrid(False)

        def view_journal_entry(index: QModelIndex):
            entry = self.model().get_journal_entry(index.row())
            entry_dialog = QDialog(self)
            entry_dialog.setMinimumWidth(1100)
            layout = QGridLayout(self)
            row = 0
            for k, v in sorted(list(entry.items())):
                key_widget = QLineEdit(k)
                key_widget.setReadOnly(True)
                key_widget.setMinimumWidth(350)
                val_widget = QLineEdit(str(v))
                val_widget.setReadOnly(True)
                val_widget.setMinimumWidth(700)
                layout.addWidget(key_widget, row, 0, 1, 0, alignment=Qt.AlignLeft)
                layout.addWidget(val_widget, row, 1, 1, 2, alignment=Qt.AlignLeft)
                row += 1
            entry_dialog.setLayout(layout)
            layout.expandingDirections()
            entry_dialog.adjustSize()
            entry_dialog.show()

        self.doubleClicked.connect(view_journal_entry)

        def new_journal_entry(journal_entry):
            debug(f">>>>>>>>>>>>>>>>>>>>>>>>>>>Received{os.getpid()}{journal_entry}")
            self.model().new_journal_entry(journal_entry)
            self.scrollToBottom()

        journal_watcher_task.signal_new_entry.connect(new_journal_entry)


class JournalTableModel(QStandardItemModel):

    def __init__(self, number_of_rows: int):
        super().__init__(number_of_rows, 5)
        self.journal_entries = []
        # use spaces to force a wider column - seems to be no other EASY way to do this.
        self.setHorizontalHeaderLabels(
            [translate("Time"), translate("Host"), translate("Source"), translate("PID"), translate("Message")])

    def get_journal_entry(self, row: int):
        return self.journal_entries[row]

    def new_journal_entry(self, journal_entry):

        while self.rowCount() > 100:
            self.removeRow(0)
            self.journal_entries.pop(0)

        def align_right(item: QStandardItem):
            item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
            return item

        def selectable(item: QStandardItem):
            item.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
            return item

        self.journal_entries.append(journal_entry)

        self.appendRow(
            [
                selectable(align_right(QStandardItem(f"{journal_entry['__REALTIME_TIMESTAMP']:%H:%M:%S}"))),
                selectable(QStandardItem(journal_entry['_HOSTNAME'])),
                # TODO smarter choice of source value
                selectable(QStandardItem(journal_entry['_COMM'] if '_COMM' in journal_entry else 'unknown')),
                selectable(align_right(QStandardItem(str(journal_entry['_PID'])))),
                selectable(QStandardItem(journal_entry['MESSAGE']))
            ])


class DialogSingletonMixin:
    """
    A mixin that can augment a QDialog or QMessageBox with code to enforce a singleton UI.
    For example, it is used so that only ones settings editor can be active at a time.
    """
    _dialogs_map = {}
    debug = False

    def __init__(self) -> None:
        """Registers the concrete class as a singleton so it can be reused later."""
        super().__init__()
        class_name = self.__class__.__name__
        if class_name in DialogSingletonMixin._dialogs_map:
            raise TypeError(f"ERROR: More than one instance of {class_name} cannot exist.")
        if DialogSingletonMixin.debug:
            print(f'DEBUG: SingletonDialog created for {class_name}')
        DialogSingletonMixin._dialogs_map[class_name] = self

    def closeEvent(self, event) -> None:
        """Subclasses that implement their own closeEvent must call this closeEvent to deregister the singleton"""
        class_name = self.__class__.__name__
        if DialogSingletonMixin.debug:
            print(f'DEBUG: SingletonDialog remove {class_name}')
        del DialogSingletonMixin._dialogs_map[class_name]
        event.accept()

    def make_visible(self):
        """
        If the dialog exists(), call this to make it visible by raising it.
        Internal, used by the class method show_existing_dialog()
        """
        self.show()
        self.raise_()
        self.activateWindow()

    @classmethod
    def show_existing_dialog(cls: Type):
        """If the dialog exists(), call this to make it visible by raising it."""
        class_name = cls.__name__
        if DialogSingletonMixin.debug:
            print(f'DEBUG: SingletonDialog show existing {class_name}')
        instance = DialogSingletonMixin._dialogs_map[class_name]
        instance.make_visible()

    @classmethod
    def exists(cls: Type) -> bool:
        """Returns true if the dialog has already been created."""
        class_name = cls.__name__
        if DialogSingletonMixin.debug:
            print(f'DEBUG: SingletonDialog exists {class_name} {class_name in DialogSingletonMixin._dialogs_map}')
        return class_name in DialogSingletonMixin._dialogs_map


class AboutDialog(QMessageBox, DialogSingletonMixin):

    @staticmethod
    def invoke():
        if AboutDialog.exists():
            AboutDialog.show_existing_dialog()
        else:
            AboutDialog()

    def __init__(self):
        super().__init__()
        self.setWindowTitle(translate('About'))
        self.setTextFormat(Qt.AutoText)
        self.setText(translate('About jouno'))
        self.setInformativeText(translate(ABOUT_TEXT))
        self.setIcon(QMessageBox.Information)
        self.exec()


class HelpDialog(QDialog, DialogSingletonMixin):

    @staticmethod
    def invoke():
        if HelpDialog.exists():
            HelpDialog.show_existing_dialog()
        else:
            HelpDialog()

    def __init__(self):
        super().__init__()
        self.setWindowTitle(translate('Help'))
        layout = QVBoxLayout()
        markdown_view = QTextEdit()
        markdown_view.setReadOnly(True)
        markdown_view.setMarkdown(__doc__)
        layout.addWidget(markdown_view)
        self.setLayout(layout)
        # TODO maybe compute a minimum from the actual screen size
        self.setMinimumWidth(1400)
        self.setMinimumHeight(1000)
        # .show() is non-modal, .exec() is modal
        self.make_visible()


class ContextMenu(QMenu):

    def __init__(self,
                 about_action=None, help_action=None, enable_action=None, config_action=None,
                 quit_action=None) -> None:
        super().__init__()

        toggle_action = self.addAction(
            self.style().standardIcon(QStyle.SP_BrowserStop),
            translate('Pause'),
            enable_action)
        self.addAction(self.style().standardIcon(QStyle.SP_MessageBoxInformation),
                       translate('About'),
                       about_action)
        self.addAction(self.style().standardIcon(QStyle.SP_TitleBarContextHelpButton),
                       translate('Help'),
                       help_action)
        self.addSeparator()
        self.addAction(self.style().standardIcon(QStyle.SP_DialogCloseButton),
                       translate('Quit'),
                       quit_action)

        def triggered(action: QAction):
            print('triggered', action.text(), toggle_action.text())
            if action == toggle_action:
                if action.text() == translate("Pause"):
                    action.setText(translate('Continue'))
                    action.setIcon(self.style().standardIcon(QStyle.SP_BrowserReload))
                else:
                    action.setText(translate("Pause"))
                    action.setIcon(self.style().standardIcon(QStyle.SP_BrowserStop))

        self.triggered.connect(triggered)


def exception_handler(e_type, e_value, e_traceback):
    """Overarching error handler in case something unexpected happens."""
    print("ERROR:\n", ''.join(traceback.format_exception(e_type, e_value, e_traceback)))
    alert = QMessageBox()
    alert.setText(translate('Error: {}').format(''.join(traceback.format_exception_only(e_type, e_value))))
    alert.setInformativeText(translate('Unexpected error'))
    alert.setDetailedText(
        translate('Details: {}').format(''.join(traceback.format_exception(e_type, e_value, e_traceback))))
    alert.setIcon(QMessageBox.Critical)
    alert.exec()
    QApplication.quit()


def user_interface():
    sys.excepthook = exception_handler

    app_name = translate('Jouno - journal notifications')

    app = QApplication(sys.argv)

    window_icon = create_icon_from_svg_string(JOUNO_WINDOW_ICON_SVG)
    watch_on_icon = create_icon_from_svg_string(JOUNO_ICON_SVG)
    watch_off_icon = create_icon_from_svg_string(JOUNO_PAUSED_ICON_SVG)

    journal_watcher_task = JournalWatcherTask()

    def toggle_watcher() -> None:
        global watcher_process
        if journal_watcher_task.isRunning():
            journal_watcher_task.requestInterruption()
            tray.setIcon(watch_off_icon)
            tray.setToolTip(f"{app_name} - {translate('Paused')}")
        else:
            journal_watcher_task.start()
            tray.setIcon(watch_on_icon)
            tray.setToolTip(app_name)

    def quit_action():
        journal_watcher_task.requestInterruption()
        app.quit()

    app_context_menu = ContextMenu(
        about_action=AboutDialog.invoke,
        help_action=HelpDialog.invoke,
        enable_action=toggle_watcher,
        quit_action=quit_action)

    tray = QSystemTrayIcon()
    tray.setIcon(watch_on_icon)
    tray.setContextMenu(app_context_menu)

    app.setWindowIcon(window_icon)
    app.setApplicationDisplayName(app_name)
    app.setApplicationVersion(JOUNO_VERSION)

    def open_context_menu(position: QPoint) -> None:
        print("context menu")
        app_context_menu.exec(main_window.mapToGlobal(position))

    main_window = MainWindow(journal_watcher_task)
    main_window.customContextMenuRequested.connect(open_context_menu)

    def show_window():
        if main_window.isVisible():
            main_window.hide()
        else:
            # Use the mouse pos as a guess to where the system tray is.  The Linux Qt x,y geometry returned by
            # the tray icon is 0,0, so we can't use that.
            p = QCursor.pos()
            wg = main_window.geometry()
            # Also try to cope with the tray not being at the bottom right of the screen.
            x = p.x() - wg.width() if p.x() > wg.width() else p.x()
            y = p.y() - wg.height() if p.y() > wg.height() else p.y()
            main_window.setGeometry(x, y, wg.width(), wg.height())
            main_window.show()
            # Attempt to force it to the top with raise and activate
            main_window.raise_()
            main_window.activateWindow()

    tray.activated.connect(show_window)
    tray.setVisible(True)
    journal_watcher_task.start()
    rc = app.exec_()
    if rc == 999:  # EXIT_CODE_FOR_RESTART:
        QProcess.startDetached(app.arguments()[0], app.arguments()[1:])


def install_as_desktop_application(uninstall: bool = False):
    """Self install this script in the current Linux user's bin directory and desktop applications->settings menu."""
    desktop_dir = Path.home().joinpath('.local', 'share', 'applications')
    icon_dir = Path.home().joinpath('.local', 'share', 'icons')
    if not desktop_dir.exists():
        print(f"ERROR: No desktop directory is present:{desktop_dir.as_posix()}"
              " Cannot proceed - is this a non-standard desktop?")
        return

    bin_dir = Path.home().joinpath('bin')
    if not bin_dir.is_dir():
        print(f"WARNING: creating:{bin_dir.as_posix()}")
        os.mkdir(bin_dir)

    if not icon_dir.is_dir():
        print(f"WARNING: creating:{icon_dir.as_posix()}")
        os.mkdir(icon_dir)

    installed_script_path = bin_dir.joinpath("jouno")
    desktop_definition_path = desktop_dir.joinpath("jouno.desktop")
    icon_path = icon_dir.joinpath("jouno.png")

    if uninstall:
        os.remove(installed_script_path)
        print(f'INFO: removed {installed_script_path.as_posix()}')
        os.remove(desktop_definition_path)
        print(f'INFO: removed {desktop_definition_path.as_posix()}')
        os.remove(icon_path)
        print(f'INFO: removed {icon_path.as_posix()}')
        return

    if installed_script_path.exists():
        print(f"WARNING: skipping installation of {installed_script_path.as_posix()}, it is already present.")
    else:
        source = open(__file__).read()
        source = source.replace("#!/usr/bin/python3", '#!' + sys.executable)
        print(f'INFO: creating {installed_script_path.as_posix()}')
        open(installed_script_path, 'w').write(source)
        print(f'INFO: chmod u+rwx {installed_script_path.as_posix()}')
        os.chmod(installed_script_path, stat.S_IRWXU)

    if desktop_definition_path.exists():
        print(f"WARNING: skipping installation of {desktop_definition_path.as_posix()}, it is already present.")
    else:
        print(f'INFO: creating {desktop_definition_path.as_posix()}')
        desktop_definition = textwrap.dedent(f"""
            [Desktop Entry]
            Type=Application
            Exec={installed_script_path.as_posix()}
            Name=jouno
            GenericName=juno
            Comment=A Systemd-Journal to Freedesktop-Notifications forwarder.
            Icon={icon_path.as_posix()}
            Categories=Qt;System;Monitor;System;
            """)
        open(desktop_definition_path, 'w').write(desktop_definition)

    if icon_path.exists():
        print(f"WARNING: skipping installation of {icon_path.as_posix()}, it is already present.")
    else:
        print(f'INFO: creating {icon_path.as_posix()}')
        create_image_from_svg_string(JOUNO_ICON_SVG).save(icon_path.as_posix())

    print('INFO: installation complete. Your desktop->applications->system should now contain jouno')


def parse_args():
    args = sys.argv[1:]
    parser = argparse.ArgumentParser(
        description="A Systemd-Journal to Freedesktop-Notifications forwarder",
        formatter_class=argparse.RawTextHelpFormatter)
    parser.epilog = textwrap.dedent(f"""
            """)
    parser.add_argument('--detailed-help', default=False, action='store_true',
                        help='Detailed help (in markdown format).')
    parser.add_argument('--debug', default=False, action='store_true', help='enable debug output to stdout')
    parser.add_argument('--install', action='store_true',
                        help="installs the jouno application in the current user's path and desktop application menu.")
    parser.add_argument('--uninstall', action='store_true',
                        help='uninstalls the jouno application menu file and script for the current user.')
    parsed_args = parser.parse_args(args=args)
    if parsed_args.install:
        install_as_desktop_application()
        sys.exit()
    if parsed_args.uninstall:
        install_as_desktop_application(uninstall=True)
        sys.exit()
    if parsed_args.detailed_help:
        print(__doc__)
        sys.exit()


def main():
    signal.signal(signal.SIGINT, signal.SIG_DFL)

    args = parse_args()

    user_interface()


if __name__ == '__main__':
    main()
